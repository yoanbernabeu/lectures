---
import { slugify } from '../utils/slugify';

interface Props {
  book: {
    id: string;
    googleBooksId: string;
    status: 'reading' | 'finished' | 'to-read';
    progress?: number;
    startDate?: string;
    endDate?: string;
    rating?: number | null;
    comment?: string | null;
    abandoned?: boolean;
    genres?: string[];
    favorite?: boolean;
    title: string;
    authors: string[];
    imageUrl?: string;
  };
  compact?: boolean;
}

const { book, compact = false } = Astro.props;

const formatDate = (dateStr: string) => {
  return new Date(dateStr).toLocaleDateString('fr-FR', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
};

const getStatusBadgeClass = (status: string) => {
  const baseClasses = "text-sm px-3 py-1 rounded-full font-medium";
  switch (status) {
    case 'reading':
      return `${baseClasses} bg-primary/20 text-primary border border-primary/30`;
    case 'finished':
      return `${baseClasses} bg-green-500/20 text-green-400 border border-green-500/30`;
    case 'to-read':
      return `${baseClasses} bg-dark-lighter text-gray-300 border border-gray-600`;
    default:
      return baseClasses;
  }
};

const getStatusLabel = (status: string) => {
  switch (status) {
    case 'reading': return 'En cours';
    case 'finished': return 'Terminé';
    case 'to-read': return 'À lire';
    default: return status;
  }
};
---

<div 
  class="card bg-base-200 shadow-xl h-full hover:shadow-2xl transition-all duration-300 group"
  data-favorite={book.favorite ? "true" : "false"}
>
  <a href={`/book/${book.id}`} class="h-full flex flex-col">
    <figure class="relative w-full overflow-hidden">
      {book.imageUrl ? (
        <div class="w-full h-[280px] sm:h-[320px] lg:h-[360px]">
          <img
            src={book.imageUrl}
            alt={`Couverture du livre ${book.title}`}
            class="w-full h-full object-cover bg-base-300 transition-transform duration-300 group-hover:scale-105"
            loading="lazy"
          />
        </div>
      ) : (
        <div class="w-full h-[280px] sm:h-[320px] lg:h-[360px] bg-base-300 flex items-center justify-center">
          <span class="text-base-content/50">Image non disponible</span>
        </div>
      )}
      <div class="absolute top-2 left-2 flex gap-1 flex-wrap max-w-[calc(100%-1rem)]">
        <span class="badge badge-sm md:badge-md badge-primary shadow-lg">{getStatusLabel(book.status)}</span>
        {book.abandoned && <span class="badge badge-sm md:badge-md badge-error shadow-lg">Abandonné</span>}
        {book.favorite && (
          <span class="badge badge-sm md:badge-md badge-secondary shadow-lg">
            <svg class="w-3 h-3 mr-1" fill="currentColor" viewBox="0 0 24 24">
              <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"/>
            </svg>
            Coup de cœur
          </span>
        )}
      </div>
    </figure>
    
    <div class="card-body p-3 sm:p-4">
      <h2 class="card-title text-sm sm:text-base line-clamp-2 group-hover:text-primary transition-colors">
        {book.title}
      </h2>
      
      {book.authors && (
        <p class="text-xs sm:text-sm opacity-70 line-clamp-1">
          par {book.authors.join(', ')}
        </p>
      )}

      {book.status === 'reading' && book.progress && (
        <div class="mt-2">
          <progress 
            class="progress progress-primary w-full" 
            value={book.progress} 
            max="100"
          ></progress>
          <p class="text-xs opacity-70 mt-1">{book.progress}% lu</p>
        </div>
      )}

      {book.rating && (
        <div class="rating rating-xs sm:rating-sm mt-2">
          {[...Array(5)].map((_, i) => (
            <input
              type="radio"
              class="mask mask-star-2 bg-primary"
              disabled
              checked={i + 1 === book.rating}
            />
          ))}
        </div>
      )}
    </div>
  </a>
</div> 