---
const filters = [
  { id: 'all', label: 'Tous', icon: 'M3.75 6A2.25 2.25 0 016 3.75h2.25A2.25 2.25 0 0110.5 6v2.25a2.25 2.25 0 01-2.25 2.25H6a2.25 2.25 0 01-2.25-2.25V6zM3.75 15.75A2.25 2.25 0 016 13.5h2.25a2.25 2.25 0 012.25 2.25V18a2.25 2.25 0 01-2.25 2.25H6A2.25 2.25 0 013.75 18v-2.25zM13.5 6a2.25 2.25 0 012.25-2.25H18A2.25 2.25 0 0120.25 6v2.25A2.25 2.25 0 0118 10.5h-2.25a2.25 2.25 0 01-2.25-2.25V6zM13.5 15.75a2.25 2.25 0 012.25-2.25H18a2.25 2.25 0 012.25 2.25V18A2.25 2.25 0 0118 20.25h-2.25A2.25 2.25 0 0113.5 18v-2.25z' },
  { id: 'reading', label: 'En cours', icon: 'M12 6.042A8.967 8.967 0 006 3.75c-1.052 0-2.062.18-3 .512v14.25A8.987 8.987 0 016 18c2.305 0 4.408.867 6 2.292m0-14.25a8.966 8.966 0 016-2.292c1.052 0 2.062.18 3 .512v14.25A8.987 8.987 0 0018 18a8.967 8.967 0 00-6 2.292m0-14.25v14.25' },
  { id: 'to-read', label: 'À lire', icon: 'M12 6v6h4.5m4.5 0a9 9 0 11-18 0 9 9 0 0118 0z' },
  { id: 'finished', label: 'Terminés', icon: 'M9 12.75L11.25 15 15 9.75M21 12a9 9 0 11-18 0 9 9 0 0118 0z' }
];

const shortcutKey = '⌘/Ctrl';
---

<div x-data="{ 
  activeFilter: 'all',
  search: '',
  searchFocused: false,
  mobileMenuOpen: false,
  filterBooks() {
    const books = document.querySelectorAll('[data-book-status]');
    const searchTerm = this.search.toLowerCase();

    books.forEach((book) => {
      const status = book.getAttribute('data-book-status');
      const title = book.getAttribute('data-book-title')?.toLowerCase();
      
      const matchesStatus = this.activeFilter === 'all' || status === this.activeFilter;
      const matchesSearch = !searchTerm || title?.includes(searchTerm);
      
      book.classList.toggle('hidden', !(matchesStatus && matchesSearch));
    });
  }
}" class="sticky top-0 z-10"
x-init="
  $store.filters = {
    activeFilter: 'all',
    search: '',
    searchFocused: false,
    mobileMenuOpen: false,
    filterBooks() {
      const books = document.querySelectorAll('[data-book-status]');
      const searchTerm = this.search.toLowerCase();

      books.forEach((book) => {
        const status = book.getAttribute('data-book-status');
        const title = book.getAttribute('data-book-title')?.toLowerCase();
        
        const matchesStatus = this.activeFilter === 'all' || status === this.activeFilter;
        const matchesSearch = !searchTerm || title?.includes(searchTerm);
        
        book.classList.toggle('hidden', !(matchesStatus && matchesSearch));
      });
    }
  }
">
  <div class="bg-base-200/95 backdrop-blur-xl border-b border-base-300 shadow-lg py-4 px-4 md:px-6 mb-8">
    <div class="flex flex-col md:flex-row gap-4 items-stretch md:items-center">
      <!-- Filtres -->
      <div class="flex-1 flex items-center gap-2">
        <div class="md:hidden">
          <button 
            @click="mobileMenuOpen = !mobileMenuOpen" 
            class="btn btn-ghost btn-sm"
            :class="mobileMenuOpen ? 'btn-active' : ''"
          >
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7" />
            </svg>
            <span class="ml-2">Filtres</span>
          </button>
        </div>
        
        <!-- Menu mobile -->
        <div 
          x-show="mobileMenuOpen"
          x-transition
          class="absolute top-full left-0 right-0 mt-2 p-4 bg-base-200 shadow-xl md:hidden"
          @click.away="mobileMenuOpen = false"
        >
          <div class="flex flex-col gap-2">
            {filters.map(({ id, label, icon }) => (
              <button
                class="btn btn-ghost justify-start gap-3 h-auto py-3"
                :class=`activeFilter === '${id}' ? 'btn-active' : ''`
                @click=`activeFilter = '${id}'; filterBooks(); mobileMenuOpen = false`
              >
                <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d={icon}/>
                </svg>
                {label}
              </button>
            ))}
          </div>
        </div>

        <!-- Menu desktop -->
        <div class="hidden md:flex gap-2">
          {filters.map(({ id, label, icon }) => (
            <button
              class="btn btn-ghost gap-2 min-h-0 h-auto py-2"
              :class=`activeFilter === '${id}' ? 'btn-active' : ''`
              @click=`activeFilter = '${id}'; filterBooks()`
            >
              <svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d={icon}/>
              </svg>
              {label}
            </button>
          ))}
        </div>
      </div>

      <!-- Recherche -->
      <div 
        class="relative"
        @keydown.window.prevent.cmd.k.exact="$refs.searchInput.focus()"
        @keydown.window.prevent.ctrl.k.exact="$refs.searchInput.focus()"
        @keydown.window.escape="search = ''; $refs.searchInput.blur()"
      >
        <div class="relative">
          <input
            x-ref="searchInput"
            type="text"
            placeholder="Rechercher un livre..."
            class="input input-bordered w-full md:w-80 pl-10 pr-16 h-auto py-2 bg-base-300/50"
            x-model="search"
            @input="filterBooks()"
            @focus="searchFocused = true"
            @blur="searchFocused = false"
          />
          <div class="absolute inset-y-0 left-0 flex items-center pl-3 pointer-events-none">
            <svg 
              class="w-4 h-4 text-base-content/50"
              fill="none" 
              stroke="currentColor" 
              viewBox="0 0 24 24"
            >
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"/>
            </svg>
          </div>
          <kbd 
            class="absolute right-3 top-1/2 -translate-y-1/2 hidden md:inline-flex items-center gap-1 px-1.5 py-0.5 text-xs font-mono text-base-content/50 bg-base-300/50 rounded border border-base-content/10"
            :class="searchFocused ? 'opacity-0' : 'opacity-100'"
          >
            <span class="text-[10px]">{shortcutKey}</span>
            <span class="text-[10px]">K</span>
          </kbd>
        </div>

        <!-- Résultats de recherche -->
        <div 
          x-show="search.length > 0"
          x-transition
          class="absolute mt-2 right-0 bg-base-200 rounded-lg shadow-xl p-4 w-full border border-base-300"
        >
          <div class="flex items-center justify-between text-sm">
            <span class="text-base-content/70">
              Résultats pour "<span x-text="search"></span>"
            </span>
            <button 
              @click="search = ''; $refs.searchInput.blur()"
              class="btn btn-ghost btn-xs"
            >
              Effacer
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  import Alpine from 'alpinejs';

  document.addEventListener('keydown', (e) => {
    if ((e.metaKey || e.ctrlKey) && e.key === 'k') {
      e.preventDefault();
      const searchInput = document.querySelector('input[type="text"]') as HTMLInputElement;
      if (searchInput) {
        searchInput.focus();
      }
    }
  });

  function filterBooks() {
    const books = document.querySelectorAll('[data-book-status]');
    const activeFilter = Alpine.store('filters').activeFilter;
    const searchTerm = Alpine.store('filters').search?.toLowerCase();

    books.forEach((book) => {
      const status = book.getAttribute('data-book-status');
      const title = book.getAttribute('data-book-title')?.toLowerCase();
      
      const matchesStatus = activeFilter === 'all' || status === activeFilter;
      const matchesSearch = !searchTerm || title?.includes(searchTerm);
      
      book.classList.toggle('hidden', !(matchesStatus && matchesSearch));
    });
  }
</script>

<style>
  .input:focus {
    @apply ring-2 ring-primary/20 ring-offset-0;
  }

  .input:focus + div svg {
    @apply text-primary;
  }
</style> 